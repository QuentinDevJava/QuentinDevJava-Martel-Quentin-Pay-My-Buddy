-- 
-- Base de données : `paymybuddy`
--

-- --------------------------------------------------------

-- 
-- Structure de la table `user`
--

CREATE TABLE IF NOT EXISTS `user` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(255) NOT NULL, 
  `email` VARCHAR(255) NOT NULL UNIQUE,      
  `password` VARCHAR(255) NOT NULL, 
  PRIMARY KEY (`id`)                        
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

-- 
-- Structure de la table `transaction`
--

CREATE TABLE IF NOT EXISTS `transaction` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `sender_id` INT(11) NOT NULL, 
  `receiver_id` INT(11) NOT NULL, 
  `description` TEXT DEFAULT NULL, 
  `amount` DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (`id`),  
  CONSTRAINT `transaction_sender_id_user_id` FOREIGN KEY (`sender_id`) REFERENCES `user` (`id`) ON DELETE CASCADE,
  CONSTRAINT `transaction_receiver_id_user_id` FOREIGN KEY (`receiver_id`) REFERENCES `user` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

-- 
-- Structure de la table `user_connections`
--

CREATE TABLE IF NOT EXISTS `user_connections` (
  `user_id` INT(11) NOT NULL, 
  `connection_id` INT(11) NOT NULL, 
  PRIMARY KEY (`user_id`, `connection_id`),  
  CONSTRAINT `user_connections_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE,
  CONSTRAINT `user_connections_connection_id_fk` FOREIGN KEY (`connection_id`) REFERENCES `user` (`id`) ON DELETE CASCADE,
  CHECK (`user_id` != `connection_id`)      
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

-- 
-- Déclencheurs pour `transaction`
--

DELIMITER $$

CREATE TRIGGER `before_insert_transaction` BEFORE INSERT ON `transaction` 
FOR EACH ROW BEGIN
    IF NEW.amount <= 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Transaction amount must be positive';
    END IF;
END$$

CREATE TRIGGER `before_update_transaction` BEFORE UPDATE ON `transaction`
FOR EACH ROW BEGIN
    IF NEW.amount <= 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Transaction amount must be positive';
    END IF;
END$$

DELIMITER ;

-- --------------------------------------------------------

-- 
-- Déclencheurs pour `user_connections`
--

DELIMITER $$

CREATE TRIGGER `check_self_connection_before_insert` BEFORE INSERT ON `user_connections`
FOR EACH ROW BEGIN
    IF NEW.user_id = NEW.connection_id THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User cannot connect to themselves';
    END IF;
END$$

CREATE TRIGGER `check_self_connection_before_update` BEFORE UPDATE ON `user_connections`
FOR EACH ROW BEGIN
    IF NEW.user_id = NEW.connection_id THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User cannot connect to themselves';
    END IF;
END$$

DELIMITER ;

-- --------------------------------------------------------

-- 
-- Index pour la table `transaction`
--

ALTER TABLE `transaction`
  ADD KEY `transaction_sender_id_user_id` (`sender_id`),
  ADD KEY `transaction_receiver_id_user_id` (`receiver_id`);

-- --------------------------------------------------------

-- 
-- Index pour la table `user`
--

ALTER TABLE `user`
  ADD UNIQUE KEY `email_unique` (`email`) USING BTREE;

-- --------------------------------------------------------

-- 
-- Index pour la table `user_connections`
--

ALTER TABLE `user_connections`
  ADD KEY `connection_id` (`connection_id`);

-- --------------------------------------------------------

-- 
-- Commit pour appliquer toutes les modifications
COMMIT;